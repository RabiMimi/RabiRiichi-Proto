// @generated by protobuf-ts 2.7.0 with parameter client_grpc1
// @generated from protobuf file "Server/Rpc/User.proto" (syntax proto3)
// tslint:disable
import { UserService } from "./User";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { Empty } from "../../google/protobuf/empty";
import type { UserInfoResponse } from "./User";
import type { CreateUserRequest } from "./User";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service UserService
 */
export interface IUserServiceClient {
    /**
     * @generated from protobuf rpc: CreateUser(CreateUserRequest) returns (UserInfoResponse);
     */
    createUser(input: CreateUserRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: UserInfoResponse) => void): grpc.ClientUnaryCall;
    createUser(input: CreateUserRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: UserInfoResponse) => void): grpc.ClientUnaryCall;
    createUser(input: CreateUserRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: UserInfoResponse) => void): grpc.ClientUnaryCall;
    createUser(input: CreateUserRequest, callback: (err: grpc.ServiceError | null, value?: UserInfoResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: GetMyInfo(google.protobuf.Empty) returns (UserInfoResponse);
     */
    getMyInfo(input: Empty, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: UserInfoResponse) => void): grpc.ClientUnaryCall;
    getMyInfo(input: Empty, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: UserInfoResponse) => void): grpc.ClientUnaryCall;
    getMyInfo(input: Empty, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: UserInfoResponse) => void): grpc.ClientUnaryCall;
    getMyInfo(input: Empty, callback: (err: grpc.ServiceError | null, value?: UserInfoResponse) => void): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service UserService
 */
export class UserServiceClient extends grpc.Client implements IUserServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: CreateUser(CreateUserRequest) returns (UserInfoResponse);
     */
    createUser(input: CreateUserRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: UserInfoResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: UserInfoResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: UserInfoResponse) => void)): grpc.ClientUnaryCall {
        const method = UserService.methods[0];
        return this.makeUnaryRequest<CreateUserRequest, UserInfoResponse>(`/${UserService.typeName}/${method.name}`, (value: CreateUserRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): UserInfoResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: GetMyInfo(google.protobuf.Empty) returns (UserInfoResponse);
     */
    getMyInfo(input: Empty, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: UserInfoResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: UserInfoResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: UserInfoResponse) => void)): grpc.ClientUnaryCall {
        const method = UserService.methods[1];
        return this.makeUnaryRequest<Empty, UserInfoResponse>(`/${UserService.typeName}/${method.name}`, (value: Empty): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): UserInfoResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
