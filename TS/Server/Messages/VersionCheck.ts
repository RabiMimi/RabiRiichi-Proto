// @generated by protobuf-ts 2.7.0 with parameter client_grpc1
// @generated from protobuf file "Server/Messages/VersionCheck.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ServerVersionCheckMsg
 */
export interface ServerVersionCheckMsg {
    /**
     * @generated from protobuf field: string game = 1;
     */
    game: string;
    /**
     * @generated from protobuf field: string game_version = 2;
     */
    gameVersion: string;
    /**
     * @generated from protobuf field: string server = 3;
     */
    server: string;
    /**
     * @generated from protobuf field: string server_version = 4;
     */
    serverVersion: string;
    /**
     * @generated from protobuf field: string min_client_version = 5;
     */
    minClientVersion: string;
}
/**
 * @generated from protobuf message ClientVersionCheckMsg
 */
export interface ClientVersionCheckMsg {
    /**
     * @generated from protobuf field: string client = 1;
     */
    client: string;
    /**
     * @generated from protobuf field: string client_version = 2;
     */
    clientVersion: string;
    /**
     * @generated from protobuf field: string min_server_version = 3;
     */
    minServerVersion: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ServerVersionCheckMsg$Type extends MessageType<ServerVersionCheckMsg> {
    constructor() {
        super("ServerVersionCheckMsg", [
            { no: 1, name: "game", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "game_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "server", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "server_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "min_client_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServerVersionCheckMsg>): ServerVersionCheckMsg {
        const message = { game: "", gameVersion: "", server: "", serverVersion: "", minClientVersion: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerVersionCheckMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerVersionCheckMsg): ServerVersionCheckMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string game */ 1:
                    message.game = reader.string();
                    break;
                case /* string game_version */ 2:
                    message.gameVersion = reader.string();
                    break;
                case /* string server */ 3:
                    message.server = reader.string();
                    break;
                case /* string server_version */ 4:
                    message.serverVersion = reader.string();
                    break;
                case /* string min_client_version */ 5:
                    message.minClientVersion = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerVersionCheckMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string game = 1; */
        if (message.game !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.game);
        /* string game_version = 2; */
        if (message.gameVersion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.gameVersion);
        /* string server = 3; */
        if (message.server !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.server);
        /* string server_version = 4; */
        if (message.serverVersion !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.serverVersion);
        /* string min_client_version = 5; */
        if (message.minClientVersion !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.minClientVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServerVersionCheckMsg
 */
export const ServerVersionCheckMsg = new ServerVersionCheckMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientVersionCheckMsg$Type extends MessageType<ClientVersionCheckMsg> {
    constructor() {
        super("ClientVersionCheckMsg", [
            { no: 1, name: "client", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "client_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "min_server_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClientVersionCheckMsg>): ClientVersionCheckMsg {
        const message = { client: "", clientVersion: "", minServerVersion: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientVersionCheckMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientVersionCheckMsg): ClientVersionCheckMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client */ 1:
                    message.client = reader.string();
                    break;
                case /* string client_version */ 2:
                    message.clientVersion = reader.string();
                    break;
                case /* string min_server_version */ 3:
                    message.minServerVersion = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientVersionCheckMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string client = 1; */
        if (message.client !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.client);
        /* string client_version = 2; */
        if (message.clientVersion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.clientVersion);
        /* string min_server_version = 3; */
        if (message.minServerVersion !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.minServerVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClientVersionCheckMsg
 */
export const ClientVersionCheckMsg = new ClientVersionCheckMsg$Type();
