// @generated by protobuf-ts 2.7.0 with parameter client_grpc1
// @generated from protobuf file "Server/Messages/HeartBeat.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message TwoWayHeartBeatMsg
 */
export interface TwoWayHeartBeatMsg {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: int32 max_id = 2;
     */
    maxId: number;
    /**
     * @generated from protobuf field: repeated int32 requesting_ids = 3;
     */
    requestingIds: number[];
}
// @generated message type with reflection information, may provide speed optimized methods
class TwoWayHeartBeatMsg$Type extends MessageType<TwoWayHeartBeatMsg> {
    constructor() {
        super("TwoWayHeartBeatMsg", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "max_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "requesting_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TwoWayHeartBeatMsg>): TwoWayHeartBeatMsg {
        const message = { id: 0, maxId: 0, requestingIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TwoWayHeartBeatMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TwoWayHeartBeatMsg): TwoWayHeartBeatMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* int32 max_id */ 2:
                    message.maxId = reader.int32();
                    break;
                case /* repeated int32 requesting_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.requestingIds.push(reader.int32());
                    else
                        message.requestingIds.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TwoWayHeartBeatMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* int32 max_id = 2; */
        if (message.maxId !== 0)
            writer.tag(2, WireType.Varint).int32(message.maxId);
        /* repeated int32 requesting_ids = 3; */
        if (message.requestingIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.requestingIds.length; i++)
                writer.int32(message.requestingIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TwoWayHeartBeatMsg
 */
export const TwoWayHeartBeatMsg = new TwoWayHeartBeatMsg$Type();
