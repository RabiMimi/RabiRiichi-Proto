// @generated by protobuf-ts 2.7.0 with parameter client_grpc1
// @generated from protobuf file "RabiRiichi.Server/Rpc/Streaming.proto" (syntax proto3)
// tslint:disable
import { StreamingService } from "./Streaming";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { ServerStreamingResponse } from "./Streaming";
import type { ClientStreamingRequest } from "./Streaming";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service StreamingService
 */
export interface IStreamingServiceClient {
    /**
     * @generated from protobuf rpc: ConnectGame(stream ClientStreamingRequest) returns (stream ServerStreamingResponse);
     */
    connectGame(metadata: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientDuplexStream<ClientStreamingRequest, ServerStreamingResponse>;
    connectGame(options?: grpc.CallOptions): grpc.ClientDuplexStream<ClientStreamingRequest, ServerStreamingResponse>;
}
/**
 * @generated from protobuf service StreamingService
 */
export class StreamingServiceClient extends grpc.Client implements IStreamingServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: ConnectGame(stream ClientStreamingRequest) returns (stream ServerStreamingResponse);
     */
    connectGame(metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientDuplexStream<ClientStreamingRequest, ServerStreamingResponse> {
        const method = StreamingService.methods[0];
        return this.makeBidiStreamRequest<ClientStreamingRequest, ServerStreamingResponse>(`/${StreamingService.typeName}/${method.name}`, (value: ClientStreamingRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ServerStreamingResponse => method.O.fromBinary(value, this._binaryOptions), (metadata as any), options);
    }
}
