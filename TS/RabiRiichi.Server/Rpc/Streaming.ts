// @generated by protobuf-ts 2.7.0 with parameter client_grpc1
// @generated from protobuf file "RabiRiichi.Server/Rpc/Streaming.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { EventMsg } from "../../Events/Event";
import { SinglePlayerInquiryMsg } from "../../Actions/SinglePlayerInquiry";
import { ServerMsg } from "../Messages/Message";
import { ClientMsg } from "../Messages/Message";
/**
 * @generated from protobuf message ClientStreamingRequest
 */
export interface ClientStreamingRequest {
    /**
     * @generated from protobuf oneof: msg
     */
    msg: {
        oneofKind: "client";
        /**
         * @generated from protobuf field: ClientMsg client = 1;
         */
        client: ClientMsg;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ServerStreamingResponse
 */
export interface ServerStreamingResponse {
    /**
     * @generated from protobuf oneof: msg
     */
    msg: {
        oneofKind: "server";
        /**
         * @generated from protobuf field: ServerMsg server = 1;
         */
        server: ServerMsg;
    } | {
        oneofKind: "inquiry";
        /**
         * @generated from protobuf field: SinglePlayerInquiryMsg inquiry = 2;
         */
        inquiry: SinglePlayerInquiryMsg;
    } | {
        oneofKind: "event";
        /**
         * @generated from protobuf field: EventMsg event = 3;
         */
        event: EventMsg;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientStreamingRequest$Type extends MessageType<ClientStreamingRequest> {
    constructor() {
        super("ClientStreamingRequest", [
            { no: 1, name: "client", kind: "message", oneof: "msg", T: () => ClientMsg }
        ]);
    }
    create(value?: PartialMessage<ClientStreamingRequest>): ClientStreamingRequest {
        const message = { msg: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientStreamingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientStreamingRequest): ClientStreamingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ClientMsg client */ 1:
                    message.msg = {
                        oneofKind: "client",
                        client: ClientMsg.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).client)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientStreamingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ClientMsg client = 1; */
        if (message.msg.oneofKind === "client")
            ClientMsg.internalBinaryWrite(message.msg.client, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClientStreamingRequest
 */
export const ClientStreamingRequest = new ClientStreamingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerStreamingResponse$Type extends MessageType<ServerStreamingResponse> {
    constructor() {
        super("ServerStreamingResponse", [
            { no: 1, name: "server", kind: "message", oneof: "msg", T: () => ServerMsg },
            { no: 2, name: "inquiry", kind: "message", oneof: "msg", T: () => SinglePlayerInquiryMsg },
            { no: 3, name: "event", kind: "message", oneof: "msg", T: () => EventMsg }
        ]);
    }
    create(value?: PartialMessage<ServerStreamingResponse>): ServerStreamingResponse {
        const message = { msg: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerStreamingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerStreamingResponse): ServerStreamingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ServerMsg server */ 1:
                    message.msg = {
                        oneofKind: "server",
                        server: ServerMsg.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).server)
                    };
                    break;
                case /* SinglePlayerInquiryMsg inquiry */ 2:
                    message.msg = {
                        oneofKind: "inquiry",
                        inquiry: SinglePlayerInquiryMsg.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).inquiry)
                    };
                    break;
                case /* EventMsg event */ 3:
                    message.msg = {
                        oneofKind: "event",
                        event: EventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).event)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerStreamingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ServerMsg server = 1; */
        if (message.msg.oneofKind === "server")
            ServerMsg.internalBinaryWrite(message.msg.server, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* SinglePlayerInquiryMsg inquiry = 2; */
        if (message.msg.oneofKind === "inquiry")
            SinglePlayerInquiryMsg.internalBinaryWrite(message.msg.inquiry, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* EventMsg event = 3; */
        if (message.msg.oneofKind === "event")
            EventMsg.internalBinaryWrite(message.msg.event, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServerStreamingResponse
 */
export const ServerStreamingResponse = new ServerStreamingResponse$Type();
/**
 * @generated ServiceType for protobuf service StreamingService
 */
export const StreamingService = new ServiceType("StreamingService", [
    { name: "ConnectGame", serverStreaming: true, clientStreaming: true, options: {}, I: ClientStreamingRequest, O: ServerStreamingResponse }
]);
