// @generated by protobuf-ts 2.7.0 with parameter client_grpc1
// @generated from protobuf file "RabiRiichi.Server/Messages/Room.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GameConfigMsg } from "../../Core/Config/GameConfig";
/**
 * @generated from protobuf message ClientRoomUpdateMsg
 */
export interface ClientRoomUpdateMsg {
    /**
     * @generated from protobuf field: UserStatus status = 1;
     */
    status: UserStatus;
}
/**
 * @generated from protobuf message ServerPlayerStateMsg
 */
export interface ServerPlayerStateMsg {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string nickname = 2;
     */
    nickname: string;
    /**
     * @generated from protobuf field: UserStatus status = 3;
     */
    status: UserStatus;
}
/**
 * @generated from protobuf message ServerRoomStateMsg
 */
export interface ServerRoomStateMsg {
    /**
     * @generated from protobuf field: repeated ServerPlayerStateMsg players = 1;
     */
    players: ServerPlayerStateMsg[];
    /**
     * @generated from protobuf field: GameConfigMsg config = 2;
     */
    config?: GameConfigMsg;
}
/**
 * @generated from protobuf enum UserStatus
 */
export enum UserStatus {
    /**
     * @generated from protobuf enum value: USER_STATUS_NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: USER_STATUS_IN_ROOM = 1;
     */
    IN_ROOM = 1,
    /**
     * @generated from protobuf enum value: USER_STATUS_READY = 2;
     */
    READY = 2,
    /**
     * @generated from protobuf enum value: USER_STATUS_PLAYING = 3;
     */
    PLAYING = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientRoomUpdateMsg$Type extends MessageType<ClientRoomUpdateMsg> {
    constructor() {
        super("ClientRoomUpdateMsg", [
            { no: 1, name: "status", kind: "enum", T: () => ["UserStatus", UserStatus, "USER_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<ClientRoomUpdateMsg>): ClientRoomUpdateMsg {
        const message = { status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientRoomUpdateMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientRoomUpdateMsg): ClientRoomUpdateMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* UserStatus status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientRoomUpdateMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* UserStatus status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClientRoomUpdateMsg
 */
export const ClientRoomUpdateMsg = new ClientRoomUpdateMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerPlayerStateMsg$Type extends MessageType<ServerPlayerStateMsg> {
    constructor() {
        super("ServerPlayerStateMsg", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["UserStatus", UserStatus, "USER_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<ServerPlayerStateMsg>): ServerPlayerStateMsg {
        const message = { id: 0, nickname: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerPlayerStateMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerPlayerStateMsg): ServerPlayerStateMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                case /* UserStatus status */ 3:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerPlayerStateMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string nickname = 2; */
        if (message.nickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        /* UserStatus status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServerPlayerStateMsg
 */
export const ServerPlayerStateMsg = new ServerPlayerStateMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerRoomStateMsg$Type extends MessageType<ServerRoomStateMsg> {
    constructor() {
        super("ServerRoomStateMsg", [
            { no: 1, name: "players", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServerPlayerStateMsg },
            { no: 2, name: "config", kind: "message", T: () => GameConfigMsg }
        ]);
    }
    create(value?: PartialMessage<ServerRoomStateMsg>): ServerRoomStateMsg {
        const message = { players: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerRoomStateMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerRoomStateMsg): ServerRoomStateMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ServerPlayerStateMsg players */ 1:
                    message.players.push(ServerPlayerStateMsg.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* GameConfigMsg config */ 2:
                    message.config = GameConfigMsg.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerRoomStateMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ServerPlayerStateMsg players = 1; */
        for (let i = 0; i < message.players.length; i++)
            ServerPlayerStateMsg.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GameConfigMsg config = 2; */
        if (message.config)
            GameConfigMsg.internalBinaryWrite(message.config, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServerRoomStateMsg
 */
export const ServerRoomStateMsg = new ServerRoomStateMsg$Type();
