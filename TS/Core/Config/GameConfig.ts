// @generated by protobuf-ts 2.7.0 with parameter client_grpc1
// @generated from protobuf file "Core/Config/GameConfig.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PointThresholdMsg } from "./PointThreshold";
/**
 * @generated from protobuf message GameConfigMsg
 */
export interface GameConfigMsg {
    /**
     * @generated from protobuf field: int32 player_count = 1;
     */
    playerCount: number;
    /**
     * @generated from protobuf field: int32 total_round = 2;
     */
    totalRound: number;
    /**
     * @generated from protobuf field: int32 min_han = 3;
     */
    minHan: number;
    /**
     * @generated from protobuf field: PointThresholdMsg point_threshold = 4;
     */
    pointThreshold?: PointThresholdMsg;
    /**
     * @generated from protobuf field: int32 renchan_policy = 5;
     */
    renchanPolicy: number;
    /**
     * @generated from protobuf field: int32 end_game_policy = 6;
     */
    endGamePolicy: number;
    /**
     * @generated from protobuf field: int32 kuikae_policy = 7;
     */
    kuikaePolicy: number;
    /**
     * @generated from protobuf field: int32 riichi_policy = 8;
     */
    riichiPolicy: number;
    /**
     * @generated from protobuf field: int32 dora_option = 9;
     */
    doraOption: number;
    /**
     * @generated from protobuf field: int32 agari_option = 10;
     */
    agariOption: number;
    /**
     * @generated from protobuf field: int32 scoring_option = 11;
     */
    scoringOption: number;
    /**
     * @generated from protobuf field: int32 ryuukyoku_trigger = 12;
     */
    ryuukyokuTrigger: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GameConfigMsg$Type extends MessageType<GameConfigMsg> {
    constructor() {
        super("GameConfigMsg", [
            { no: 1, name: "player_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "total_round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "min_han", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "point_threshold", kind: "message", T: () => PointThresholdMsg },
            { no: 5, name: "renchan_policy", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "end_game_policy", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "kuikae_policy", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "riichi_policy", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "dora_option", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "agari_option", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "scoring_option", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "ryuukyoku_trigger", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameConfigMsg>): GameConfigMsg {
        const message = { playerCount: 0, totalRound: 0, minHan: 0, renchanPolicy: 0, endGamePolicy: 0, kuikaePolicy: 0, riichiPolicy: 0, doraOption: 0, agariOption: 0, scoringOption: 0, ryuukyokuTrigger: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameConfigMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameConfigMsg): GameConfigMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 player_count */ 1:
                    message.playerCount = reader.int32();
                    break;
                case /* int32 total_round */ 2:
                    message.totalRound = reader.int32();
                    break;
                case /* int32 min_han */ 3:
                    message.minHan = reader.int32();
                    break;
                case /* PointThresholdMsg point_threshold */ 4:
                    message.pointThreshold = PointThresholdMsg.internalBinaryRead(reader, reader.uint32(), options, message.pointThreshold);
                    break;
                case /* int32 renchan_policy */ 5:
                    message.renchanPolicy = reader.int32();
                    break;
                case /* int32 end_game_policy */ 6:
                    message.endGamePolicy = reader.int32();
                    break;
                case /* int32 kuikae_policy */ 7:
                    message.kuikaePolicy = reader.int32();
                    break;
                case /* int32 riichi_policy */ 8:
                    message.riichiPolicy = reader.int32();
                    break;
                case /* int32 dora_option */ 9:
                    message.doraOption = reader.int32();
                    break;
                case /* int32 agari_option */ 10:
                    message.agariOption = reader.int32();
                    break;
                case /* int32 scoring_option */ 11:
                    message.scoringOption = reader.int32();
                    break;
                case /* int32 ryuukyoku_trigger */ 12:
                    message.ryuukyokuTrigger = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameConfigMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 player_count = 1; */
        if (message.playerCount !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerCount);
        /* int32 total_round = 2; */
        if (message.totalRound !== 0)
            writer.tag(2, WireType.Varint).int32(message.totalRound);
        /* int32 min_han = 3; */
        if (message.minHan !== 0)
            writer.tag(3, WireType.Varint).int32(message.minHan);
        /* PointThresholdMsg point_threshold = 4; */
        if (message.pointThreshold)
            PointThresholdMsg.internalBinaryWrite(message.pointThreshold, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 renchan_policy = 5; */
        if (message.renchanPolicy !== 0)
            writer.tag(5, WireType.Varint).int32(message.renchanPolicy);
        /* int32 end_game_policy = 6; */
        if (message.endGamePolicy !== 0)
            writer.tag(6, WireType.Varint).int32(message.endGamePolicy);
        /* int32 kuikae_policy = 7; */
        if (message.kuikaePolicy !== 0)
            writer.tag(7, WireType.Varint).int32(message.kuikaePolicy);
        /* int32 riichi_policy = 8; */
        if (message.riichiPolicy !== 0)
            writer.tag(8, WireType.Varint).int32(message.riichiPolicy);
        /* int32 dora_option = 9; */
        if (message.doraOption !== 0)
            writer.tag(9, WireType.Varint).int32(message.doraOption);
        /* int32 agari_option = 10; */
        if (message.agariOption !== 0)
            writer.tag(10, WireType.Varint).int32(message.agariOption);
        /* int32 scoring_option = 11; */
        if (message.scoringOption !== 0)
            writer.tag(11, WireType.Varint).int32(message.scoringOption);
        /* int32 ryuukyoku_trigger = 12; */
        if (message.ryuukyokuTrigger !== 0)
            writer.tag(12, WireType.Varint).int32(message.ryuukyokuTrigger);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameConfigMsg
 */
export const GameConfigMsg = new GameConfigMsg$Type();
