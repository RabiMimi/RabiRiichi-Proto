// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "Core/Config/PointThreshold.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message PointThresholdMsg
 */
export interface PointThresholdMsg {
    /**
     * @generated from protobuf field: int64 initial_points = 1;
     */
    initialPoints: bigint;
    /**
     * @generated from protobuf field: int64 riichi_points = 2;
     */
    riichiPoints: bigint;
    /**
     * @generated from protobuf field: int64 honba_points = 3;
     */
    honbaPoints: bigint;
    /**
     * @generated from protobuf field: int64 finish_points = 4;
     */
    finishPoints: bigint;
    /**
     * @generated from protobuf field: repeated int64 ryuukyoku_points = 5;
     */
    ryuukyokuPoints: bigint[];
    /**
     * @generated from protobuf field: repeated int64 valid_points_range = 6;
     */
    validPointsRange: bigint[];
}
// @generated message type with reflection information, may provide speed optimized methods
class PointThresholdMsg$Type extends MessageType<PointThresholdMsg> {
    constructor() {
        super("PointThresholdMsg", [
            { no: 1, name: "initial_points", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "riichi_points", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "honba_points", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "finish_points", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "ryuukyoku_points", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "valid_points_range", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PointThresholdMsg>): PointThresholdMsg {
        const message = { initialPoints: 0n, riichiPoints: 0n, honbaPoints: 0n, finishPoints: 0n, ryuukyokuPoints: [], validPointsRange: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PointThresholdMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PointThresholdMsg): PointThresholdMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 initial_points */ 1:
                    message.initialPoints = reader.int64().toBigInt();
                    break;
                case /* int64 riichi_points */ 2:
                    message.riichiPoints = reader.int64().toBigInt();
                    break;
                case /* int64 honba_points */ 3:
                    message.honbaPoints = reader.int64().toBigInt();
                    break;
                case /* int64 finish_points */ 4:
                    message.finishPoints = reader.int64().toBigInt();
                    break;
                case /* repeated int64 ryuukyoku_points */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.ryuukyokuPoints.push(reader.int64().toBigInt());
                    else
                        message.ryuukyokuPoints.push(reader.int64().toBigInt());
                    break;
                case /* repeated int64 valid_points_range */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.validPointsRange.push(reader.int64().toBigInt());
                    else
                        message.validPointsRange.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PointThresholdMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 initial_points = 1; */
        if (message.initialPoints !== 0n)
            writer.tag(1, WireType.Varint).int64(message.initialPoints);
        /* int64 riichi_points = 2; */
        if (message.riichiPoints !== 0n)
            writer.tag(2, WireType.Varint).int64(message.riichiPoints);
        /* int64 honba_points = 3; */
        if (message.honbaPoints !== 0n)
            writer.tag(3, WireType.Varint).int64(message.honbaPoints);
        /* int64 finish_points = 4; */
        if (message.finishPoints !== 0n)
            writer.tag(4, WireType.Varint).int64(message.finishPoints);
        /* repeated int64 ryuukyoku_points = 5; */
        if (message.ryuukyokuPoints.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.ryuukyokuPoints.length; i++)
                writer.int64(message.ryuukyokuPoints[i]);
            writer.join();
        }
        /* repeated int64 valid_points_range = 6; */
        if (message.validPointsRange.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.validPointsRange.length; i++)
                writer.int64(message.validPointsRange[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PointThresholdMsg
 */
export const PointThresholdMsg = new PointThresholdMsg$Type();
