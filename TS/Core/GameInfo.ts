// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "Core/GameInfo.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Wind } from "./Player";
/**
 * @generated from protobuf message GameInfoMsg
 */
export interface GameInfoMsg {
    /**
     * @generated from protobuf field: int32 round = 1;
     */
    round: number;
    /**
     * @generated from protobuf field: Wind wind = 2;
     */
    wind: Wind;
    /**
     * @generated from protobuf field: int32 dealer = 3;
     */
    dealer: number;
    /**
     * @generated from protobuf field: int32 honba = 4;
     */
    honba: number;
    /**
     * @generated from protobuf field: int32 current_player = 5;
     */
    currentPlayer: number;
    /**
     * @generated from protobuf field: int32 riichi_stick = 6;
     */
    riichiStick: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GameInfoMsg$Type extends MessageType<GameInfoMsg> {
    constructor() {
        super("GameInfoMsg", [
            { no: 1, name: "round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "wind", kind: "enum", T: () => ["Wind", Wind] },
            { no: 3, name: "dealer", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "honba", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "current_player", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "riichi_stick", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameInfoMsg>): GameInfoMsg {
        const message = { round: 0, wind: 0, dealer: 0, honba: 0, currentPlayer: 0, riichiStick: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameInfoMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameInfoMsg): GameInfoMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 round */ 1:
                    message.round = reader.int32();
                    break;
                case /* Wind wind */ 2:
                    message.wind = reader.int32();
                    break;
                case /* int32 dealer */ 3:
                    message.dealer = reader.int32();
                    break;
                case /* int32 honba */ 4:
                    message.honba = reader.int32();
                    break;
                case /* int32 current_player */ 5:
                    message.currentPlayer = reader.int32();
                    break;
                case /* int32 riichi_stick */ 6:
                    message.riichiStick = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameInfoMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 round = 1; */
        if (message.round !== 0)
            writer.tag(1, WireType.Varint).int32(message.round);
        /* Wind wind = 2; */
        if (message.wind !== 0)
            writer.tag(2, WireType.Varint).int32(message.wind);
        /* int32 dealer = 3; */
        if (message.dealer !== 0)
            writer.tag(3, WireType.Varint).int32(message.dealer);
        /* int32 honba = 4; */
        if (message.honba !== 0)
            writer.tag(4, WireType.Varint).int32(message.honba);
        /* int32 current_player = 5; */
        if (message.currentPlayer !== 0)
            writer.tag(5, WireType.Varint).int32(message.currentPlayer);
        /* int32 riichi_stick = 6; */
        if (message.riichiStick !== 0)
            writer.tag(6, WireType.Varint).int32(message.riichiStick);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameInfoMsg
 */
export const GameInfoMsg = new GameInfoMsg$Type();
