// @generated by protobuf-ts 2.7.0 with parameter client_grpc1
// @generated from protobuf file "Core/GameTile.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message DiscardInfoMsg
 */
export interface DiscardInfoMsg {
    /**
     * @generated from protobuf field: int32 from = 1;
     */
    from: number;
    /**
     * @generated from protobuf field: DiscardReason reason = 2;
     */
    reason: DiscardReason;
    /**
     * @generated from protobuf field: int32 time = 3;
     */
    time: number;
}
/**
 * @generated from protobuf message GameTileMsg
 */
export interface GameTileMsg {
    /**
     * @generated from protobuf field: int32 tile = 1;
     */
    tile: number;
    /**
     * @generated from protobuf field: int32 player_id = 2;
     */
    playerId: number;
    /**
     * @generated from protobuf field: DiscardInfoMsg discard_info = 3;
     */
    discardInfo?: DiscardInfoMsg;
    /**
     * @generated from protobuf field: TileSource source = 4;
     */
    source: TileSource;
    /**
     * @generated from protobuf field: int32 form_time = 5;
     */
    formTime: number;
}
/**
 * @generated from protobuf enum DiscardReason
 */
export enum DiscardReason {
    /**
     * None
     *
     * @generated from protobuf enum value: DISCARD_REASON_NONE = 0;
     */
    NONE = 0,
    /**
     * Discard due to drawing another tile from wall
     *
     * @generated from protobuf enum value: DISCARD_REASON_DRAW = 1;
     */
    DRAW = 1,
    /**
     * Discard due to drawing another tile from wanpai
     *
     * @generated from protobuf enum value: DISCARD_REASON_DRAWRINSHAN = 2;
     */
    DRAWRINSHAN = 2,
    /**
     * Discard due to claiming a tile by Chii
     *
     * @generated from protobuf enum value: DISCARD_REASON_CHII = 3;
     */
    CHII = 3,
    /**
     * Discard due to claiming a tile by Pon
     *
     * @generated from protobuf enum value: DISCARD_REASON_PON = 4;
     */
    PON = 4,
    /**
     * Only used for chankan calculation, not for actual discard. This tile is the tile triggering kakan or ankan
     *
     * @generated from protobuf enum value: DISCARD_REASON_CHANKAN = 5;
     */
    CHANKAN = 5,
    /**
     * Only for calculations, not for actual discard
     *
     * @generated from protobuf enum value: DISCARD_REASON_PRETEND = 6;
     */
    PRETEND = 6
}
/**
 * @generated from protobuf enum TileSource
 */
export enum TileSource {
    /**
     * None
     *
     * @generated from protobuf enum value: TILE_SOURCE_NONE = 0;
     */
    NONE = 0,
    /**
     * From wanpai
     *
     * @generated from protobuf enum value: TILE_SOURCE_WANPAI = 1;
     */
    WANPAI = 1,
    /**
     * From wall
     *
     * @generated from protobuf enum value: TILE_SOURCE_WALL = 2;
     */
    WALL = 2,
    /**
     * From hand
     *
     * @generated from protobuf enum value: TILE_SOURCE_HAND = 3;
     */
    HAND = 3,
    /**
     * From discard
     *
     * @generated from protobuf enum value: TILE_SOURCE_DISCARD = 4;
     */
    DISCARD = 4,
    /**
     * Part of Chii
     *
     * @generated from protobuf enum value: TILE_SOURCE_CHII = 5;
     */
    CHII = 5,
    /**
     * Part of Pon
     *
     * @generated from protobuf enum value: TILE_SOURCE_PON = 6;
     */
    PON = 6,
    /**
     * Part of Kakan
     *
     * @generated from protobuf enum value: TILE_SOURCE_KAKAN = 7;
     */
    KAKAN = 7,
    /**
     * Part of Ankan
     *
     * @generated from protobuf enum value: TILE_SOURCE_ANKAN = 8;
     */
    ANKAN = 8,
    /**
     * Part of Daiminkan
     *
     * @generated from protobuf enum value: TILE_SOURCE_DAIMINKAN = 9;
     */
    DAIMINKAN = 9
}
// @generated message type with reflection information, may provide speed optimized methods
class DiscardInfoMsg$Type extends MessageType<DiscardInfoMsg> {
    constructor() {
        super("DiscardInfoMsg", [
            { no: 1, name: "from", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "reason", kind: "enum", T: () => ["DiscardReason", DiscardReason, "DISCARD_REASON_"] },
            { no: 3, name: "time", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DiscardInfoMsg>): DiscardInfoMsg {
        const message = { from: 0, reason: 0, time: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DiscardInfoMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscardInfoMsg): DiscardInfoMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 from */ 1:
                    message.from = reader.int32();
                    break;
                case /* DiscardReason reason */ 2:
                    message.reason = reader.int32();
                    break;
                case /* int32 time */ 3:
                    message.time = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiscardInfoMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 from = 1; */
        if (message.from !== 0)
            writer.tag(1, WireType.Varint).int32(message.from);
        /* DiscardReason reason = 2; */
        if (message.reason !== 0)
            writer.tag(2, WireType.Varint).int32(message.reason);
        /* int32 time = 3; */
        if (message.time !== 0)
            writer.tag(3, WireType.Varint).int32(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DiscardInfoMsg
 */
export const DiscardInfoMsg = new DiscardInfoMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameTileMsg$Type extends MessageType<GameTileMsg> {
    constructor() {
        super("GameTileMsg", [
            { no: 1, name: "tile", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "player_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "discard_info", kind: "message", T: () => DiscardInfoMsg },
            { no: 4, name: "source", kind: "enum", T: () => ["TileSource", TileSource, "TILE_SOURCE_"] },
            { no: 5, name: "form_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameTileMsg>): GameTileMsg {
        const message = { tile: 0, playerId: 0, source: 0, formTime: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameTileMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameTileMsg): GameTileMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tile */ 1:
                    message.tile = reader.int32();
                    break;
                case /* int32 player_id */ 2:
                    message.playerId = reader.int32();
                    break;
                case /* DiscardInfoMsg discard_info */ 3:
                    message.discardInfo = DiscardInfoMsg.internalBinaryRead(reader, reader.uint32(), options, message.discardInfo);
                    break;
                case /* TileSource source */ 4:
                    message.source = reader.int32();
                    break;
                case /* int32 form_time */ 5:
                    message.formTime = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameTileMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tile = 1; */
        if (message.tile !== 0)
            writer.tag(1, WireType.Varint).int32(message.tile);
        /* int32 player_id = 2; */
        if (message.playerId !== 0)
            writer.tag(2, WireType.Varint).int32(message.playerId);
        /* DiscardInfoMsg discard_info = 3; */
        if (message.discardInfo)
            DiscardInfoMsg.internalBinaryWrite(message.discardInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* TileSource source = 4; */
        if (message.source !== 0)
            writer.tag(4, WireType.Varint).int32(message.source);
        /* int32 form_time = 5; */
        if (message.formTime !== 0)
            writer.tag(5, WireType.Varint).int32(message.formTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GameTileMsg
 */
export const GameTileMsg = new GameTileMsg$Type();
