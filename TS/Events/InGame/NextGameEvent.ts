// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "Events/InGame/NextGameEvent.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message NextGameEventMsg
 */
export interface NextGameEventMsg {
    /**
     * @generated from protobuf field: int32 next_round = 1;
     */
    nextRound: number;
    /**
     * @generated from protobuf field: int32 next_dealer = 2;
     */
    nextDealer: number;
    /**
     * @generated from protobuf field: int32 next_honba = 3;
     */
    nextHonba: number;
    /**
     * @generated from protobuf field: int32 riichi_stick = 4;
     */
    riichiStick: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class NextGameEventMsg$Type extends MessageType<NextGameEventMsg> {
    constructor() {
        super("NextGameEventMsg", [
            { no: 1, name: "next_round", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "next_dealer", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "next_honba", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "riichi_stick", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<NextGameEventMsg>): NextGameEventMsg {
        const message = { nextRound: 0, nextDealer: 0, nextHonba: 0, riichiStick: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NextGameEventMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NextGameEventMsg): NextGameEventMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 next_round */ 1:
                    message.nextRound = reader.int32();
                    break;
                case /* int32 next_dealer */ 2:
                    message.nextDealer = reader.int32();
                    break;
                case /* int32 next_honba */ 3:
                    message.nextHonba = reader.int32();
                    break;
                case /* int32 riichi_stick */ 4:
                    message.riichiStick = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NextGameEventMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 next_round = 1; */
        if (message.nextRound !== 0)
            writer.tag(1, WireType.Varint).int32(message.nextRound);
        /* int32 next_dealer = 2; */
        if (message.nextDealer !== 0)
            writer.tag(2, WireType.Varint).int32(message.nextDealer);
        /* int32 next_honba = 3; */
        if (message.nextHonba !== 0)
            writer.tag(3, WireType.Varint).int32(message.nextHonba);
        /* int32 riichi_stick = 4; */
        if (message.riichiStick !== 0)
            writer.tag(4, WireType.Varint).int32(message.riichiStick);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NextGameEventMsg
 */
export const NextGameEventMsg = new NextGameEventMsg$Type();
