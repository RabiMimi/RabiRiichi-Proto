// @generated by protobuf-ts 2.7.0 with parameter client_grpc1
// @generated from protobuf file "Events/InGame/CalcScoreEvent.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AgariInfoListMsg } from "./AgariEvent";
/**
 * @generated from protobuf message ScoreTransferMsg
 */
export interface ScoreTransferMsg {
    /**
     * @generated from protobuf field: int32 from = 1;
     */
    from: number;
    /**
     * @generated from protobuf field: int32 to = 2;
     */
    to: number;
    /**
     * @generated from protobuf field: int64 points = 3;
     */
    points: bigint;
    /**
     * @generated from protobuf field: ScoreTransferReason reason = 4;
     */
    reason: ScoreTransferReason;
}
/**
 * @generated from protobuf message CalcScoreEventMsg
 */
export interface CalcScoreEventMsg {
    /**
     * @generated from protobuf field: AgariInfoListMsg agari_infos = 1;
     */
    agariInfos?: AgariInfoListMsg;
    /**
     * @generated from protobuf field: repeated ScoreTransferMsg score_change = 2;
     */
    scoreChange: ScoreTransferMsg[];
}
/**
 * @generated from protobuf enum ScoreTransferReason
 */
export enum ScoreTransferReason {
    /**
     * 无
     *
     * @generated from protobuf enum value: SCORE_TRANSFER_REASON_NONE = 0;
     */
    NONE = 0,
    /**
     * 荣和
     *
     * @generated from protobuf enum value: SCORE_TRANSFER_REASON_RON = 1;
     */
    RON = 1,
    /**
     * 自摸
     *
     * @generated from protobuf enum value: SCORE_TRANSFER_REASON_TSUMO = 2;
     */
    TSUMO = 2,
    /**
     * 流局
     *
     * @generated from protobuf enum value: SCORE_TRANSFER_REASON_RYUUKYOKU = 3;
     */
    RYUUKYOKU = 3,
    /**
     * 流局满贯
     *
     * @generated from protobuf enum value: SCORE_TRANSFER_REASON_NAGASHI_MANGAN = 4;
     */
    NAGASHI_MANGAN = 4,
    /**
     * 立直
     *
     * @generated from protobuf enum value: SCORE_TRANSFER_REASON_RIICHI = 5;
     */
    RIICHI = 5,
    /**
     * 本场棒
     *
     * @generated from protobuf enum value: SCORE_TRANSFER_REASON_HONBA = 6;
     */
    HONBA = 6,
    /**
     * 包牌
     *
     * @generated from protobuf enum value: SCORE_TRANSFER_REASON_PAO = 7;
     */
    PAO = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class ScoreTransferMsg$Type extends MessageType<ScoreTransferMsg> {
    constructor() {
        super("ScoreTransferMsg", [
            { no: 1, name: "from", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "to", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "points", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "reason", kind: "enum", T: () => ["ScoreTransferReason", ScoreTransferReason, "SCORE_TRANSFER_REASON_"] }
        ]);
    }
    create(value?: PartialMessage<ScoreTransferMsg>): ScoreTransferMsg {
        const message = { from: 0, to: 0, points: 0n, reason: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScoreTransferMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScoreTransferMsg): ScoreTransferMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 from */ 1:
                    message.from = reader.int32();
                    break;
                case /* int32 to */ 2:
                    message.to = reader.int32();
                    break;
                case /* int64 points */ 3:
                    message.points = reader.int64().toBigInt();
                    break;
                case /* ScoreTransferReason reason */ 4:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScoreTransferMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 from = 1; */
        if (message.from !== 0)
            writer.tag(1, WireType.Varint).int32(message.from);
        /* int32 to = 2; */
        if (message.to !== 0)
            writer.tag(2, WireType.Varint).int32(message.to);
        /* int64 points = 3; */
        if (message.points !== 0n)
            writer.tag(3, WireType.Varint).int64(message.points);
        /* ScoreTransferReason reason = 4; */
        if (message.reason !== 0)
            writer.tag(4, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ScoreTransferMsg
 */
export const ScoreTransferMsg = new ScoreTransferMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalcScoreEventMsg$Type extends MessageType<CalcScoreEventMsg> {
    constructor() {
        super("CalcScoreEventMsg", [
            { no: 1, name: "agari_infos", kind: "message", T: () => AgariInfoListMsg },
            { no: 2, name: "score_change", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ScoreTransferMsg }
        ]);
    }
    create(value?: PartialMessage<CalcScoreEventMsg>): CalcScoreEventMsg {
        const message = { scoreChange: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CalcScoreEventMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalcScoreEventMsg): CalcScoreEventMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AgariInfoListMsg agari_infos */ 1:
                    message.agariInfos = AgariInfoListMsg.internalBinaryRead(reader, reader.uint32(), options, message.agariInfos);
                    break;
                case /* repeated ScoreTransferMsg score_change */ 2:
                    message.scoreChange.push(ScoreTransferMsg.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalcScoreEventMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AgariInfoListMsg agari_infos = 1; */
        if (message.agariInfos)
            AgariInfoListMsg.internalBinaryWrite(message.agariInfos, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated ScoreTransferMsg score_change = 2; */
        for (let i = 0; i < message.scoreChange.length; i++)
            ScoreTransferMsg.internalBinaryWrite(message.scoreChange[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CalcScoreEventMsg
 */
export const CalcScoreEventMsg = new CalcScoreEventMsg$Type();
