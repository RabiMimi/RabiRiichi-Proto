// @generated by protobuf-ts 2.7.0 with parameter client_grpc1
// @generated from protobuf file "Events/InGame/SetFuritenEvent.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message SetFuritenEventMsg
 */
export interface SetFuritenEventMsg {
    /**
     * @generated from protobuf field: int32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: bool furiten = 2;
     */
    furiten: boolean;
    /**
     * @generated from protobuf field: FuritenType furiten_type = 3;
     */
    furitenType: FuritenType;
}
/**
 * @generated from protobuf enum FuritenType
 */
export enum FuritenType {
    /**
     * 同巡振听
     *
     * @generated from protobuf enum value: TEMP = 0;
     */
    TEMP = 0,
    /**
     * 立直振听
     *
     * @generated from protobuf enum value: RIICHI = 1;
     */
    RIICHI = 1,
    /**
     * 舍牌振听
     *
     * @generated from protobuf enum value: DISCARD = 2;
     */
    DISCARD = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class SetFuritenEventMsg$Type extends MessageType<SetFuritenEventMsg> {
    constructor() {
        super("SetFuritenEventMsg", [
            { no: 1, name: "player_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "furiten", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "furiten_type", kind: "enum", T: () => ["FuritenType", FuritenType] }
        ]);
    }
    create(value?: PartialMessage<SetFuritenEventMsg>): SetFuritenEventMsg {
        const message = { playerId: 0, furiten: false, furitenType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetFuritenEventMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetFuritenEventMsg): SetFuritenEventMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 player_id */ 1:
                    message.playerId = reader.int32();
                    break;
                case /* bool furiten */ 2:
                    message.furiten = reader.bool();
                    break;
                case /* FuritenType furiten_type */ 3:
                    message.furitenType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetFuritenEventMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerId);
        /* bool furiten = 2; */
        if (message.furiten !== false)
            writer.tag(2, WireType.Varint).bool(message.furiten);
        /* FuritenType furiten_type = 3; */
        if (message.furitenType !== 0)
            writer.tag(3, WireType.Varint).int32(message.furitenType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetFuritenEventMsg
 */
export const SetFuritenEventMsg = new SetFuritenEventMsg$Type();
