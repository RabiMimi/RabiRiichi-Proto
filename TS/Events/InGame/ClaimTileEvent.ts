// @generated by protobuf-ts 2.7.0 with parameter client_grpc1
// @generated from protobuf file "Events/InGame/ClaimTileEvent.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DiscardReason } from "../../Core/GameTile";
import { MenLikeMsg } from "../../Core/MenLike";
import { GameTileMsg } from "../../Core/GameTile";
/**
 * @generated from protobuf message ClaimTileEventMsg
 */
export interface ClaimTileEventMsg {
    /**
     * @generated from protobuf field: int32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: GameTileMsg tile = 2;
     */
    tile?: GameTileMsg;
    /**
     * @generated from protobuf field: MenLikeMsg group = 3;
     */
    group?: MenLikeMsg;
    /**
     * @generated from protobuf field: DiscardReason reason = 4;
     */
    reason: DiscardReason;
}
// @generated message type with reflection information, may provide speed optimized methods
class ClaimTileEventMsg$Type extends MessageType<ClaimTileEventMsg> {
    constructor() {
        super("ClaimTileEventMsg", [
            { no: 1, name: "player_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "tile", kind: "message", T: () => GameTileMsg },
            { no: 3, name: "group", kind: "message", T: () => MenLikeMsg },
            { no: 4, name: "reason", kind: "enum", T: () => ["DiscardReason", DiscardReason, "DISCARD_REASON_"] }
        ]);
    }
    create(value?: PartialMessage<ClaimTileEventMsg>): ClaimTileEventMsg {
        const message = { playerId: 0, reason: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClaimTileEventMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClaimTileEventMsg): ClaimTileEventMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 player_id */ 1:
                    message.playerId = reader.int32();
                    break;
                case /* GameTileMsg tile */ 2:
                    message.tile = GameTileMsg.internalBinaryRead(reader, reader.uint32(), options, message.tile);
                    break;
                case /* MenLikeMsg group */ 3:
                    message.group = MenLikeMsg.internalBinaryRead(reader, reader.uint32(), options, message.group);
                    break;
                case /* DiscardReason reason */ 4:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClaimTileEventMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerId);
        /* GameTileMsg tile = 2; */
        if (message.tile)
            GameTileMsg.internalBinaryWrite(message.tile, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MenLikeMsg group = 3; */
        if (message.group)
            MenLikeMsg.internalBinaryWrite(message.group, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* DiscardReason reason = 4; */
        if (message.reason !== 0)
            writer.tag(4, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClaimTileEventMsg
 */
export const ClaimTileEventMsg = new ClaimTileEventMsg$Type();
