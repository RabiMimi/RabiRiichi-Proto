// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "Events/InGame/RyuukyokuEvent.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ScoreTransferMsg } from "./CalcScoreEvent";
/**
 * @generated from protobuf message EndGameRyuukyokuEventMsg
 */
export interface EndGameRyuukyokuEventMsg {
    /**
     * @generated from protobuf field: repeated int32 remaining_players = 1;
     */
    remainingPlayers: number[];
    /**
     * @generated from protobuf field: repeated int32 nagashi_mangan_players = 2;
     */
    nagashiManganPlayers: number[];
    /**
     * @generated from protobuf field: repeated int32 tenpai_players = 3;
     */
    tenpaiPlayers: number[];
}
/**
 * @generated from protobuf message MidGameRyuukyokuEventMsg
 */
export interface MidGameRyuukyokuEventMsg {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message RyuukyokuEventMsg
 */
export interface RyuukyokuEventMsg {
    /**
     * @generated from protobuf field: repeated ScoreTransferMsg score_change = 1;
     */
    scoreChange: ScoreTransferMsg[];
    /**
     * @generated from protobuf oneof: ryuukyokuEvent
     */
    ryuukyokuEvent: {
        oneofKind: "endGameRyuukyoku";
        /**
         * @generated from protobuf field: EndGameRyuukyokuEventMsg end_game_ryuukyoku = 2;
         */
        endGameRyuukyoku: EndGameRyuukyokuEventMsg;
    } | {
        oneofKind: "midGameRyuukyoku";
        /**
         * @generated from protobuf field: MidGameRyuukyokuEventMsg mid_game_ryuukyoku = 3;
         */
        midGameRyuukyoku: MidGameRyuukyokuEventMsg;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class EndGameRyuukyokuEventMsg$Type extends MessageType<EndGameRyuukyokuEventMsg> {
    constructor() {
        super("EndGameRyuukyokuEventMsg", [
            { no: 1, name: "remaining_players", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "nagashi_mangan_players", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "tenpai_players", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EndGameRyuukyokuEventMsg>): EndGameRyuukyokuEventMsg {
        const message = { remainingPlayers: [], nagashiManganPlayers: [], tenpaiPlayers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EndGameRyuukyokuEventMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EndGameRyuukyokuEventMsg): EndGameRyuukyokuEventMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 remaining_players */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.remainingPlayers.push(reader.int32());
                    else
                        message.remainingPlayers.push(reader.int32());
                    break;
                case /* repeated int32 nagashi_mangan_players */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.nagashiManganPlayers.push(reader.int32());
                    else
                        message.nagashiManganPlayers.push(reader.int32());
                    break;
                case /* repeated int32 tenpai_players */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tenpaiPlayers.push(reader.int32());
                    else
                        message.tenpaiPlayers.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EndGameRyuukyokuEventMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 remaining_players = 1; */
        if (message.remainingPlayers.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.remainingPlayers.length; i++)
                writer.int32(message.remainingPlayers[i]);
            writer.join();
        }
        /* repeated int32 nagashi_mangan_players = 2; */
        if (message.nagashiManganPlayers.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.nagashiManganPlayers.length; i++)
                writer.int32(message.nagashiManganPlayers[i]);
            writer.join();
        }
        /* repeated int32 tenpai_players = 3; */
        if (message.tenpaiPlayers.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tenpaiPlayers.length; i++)
                writer.int32(message.tenpaiPlayers[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EndGameRyuukyokuEventMsg
 */
export const EndGameRyuukyokuEventMsg = new EndGameRyuukyokuEventMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MidGameRyuukyokuEventMsg$Type extends MessageType<MidGameRyuukyokuEventMsg> {
    constructor() {
        super("MidGameRyuukyokuEventMsg", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MidGameRyuukyokuEventMsg>): MidGameRyuukyokuEventMsg {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MidGameRyuukyokuEventMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MidGameRyuukyokuEventMsg): MidGameRyuukyokuEventMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MidGameRyuukyokuEventMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MidGameRyuukyokuEventMsg
 */
export const MidGameRyuukyokuEventMsg = new MidGameRyuukyokuEventMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RyuukyokuEventMsg$Type extends MessageType<RyuukyokuEventMsg> {
    constructor() {
        super("RyuukyokuEventMsg", [
            { no: 1, name: "score_change", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ScoreTransferMsg },
            { no: 2, name: "end_game_ryuukyoku", kind: "message", oneof: "ryuukyokuEvent", T: () => EndGameRyuukyokuEventMsg },
            { no: 3, name: "mid_game_ryuukyoku", kind: "message", oneof: "ryuukyokuEvent", T: () => MidGameRyuukyokuEventMsg }
        ]);
    }
    create(value?: PartialMessage<RyuukyokuEventMsg>): RyuukyokuEventMsg {
        const message = { scoreChange: [], ryuukyokuEvent: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RyuukyokuEventMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RyuukyokuEventMsg): RyuukyokuEventMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ScoreTransferMsg score_change */ 1:
                    message.scoreChange.push(ScoreTransferMsg.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* EndGameRyuukyokuEventMsg end_game_ryuukyoku */ 2:
                    message.ryuukyokuEvent = {
                        oneofKind: "endGameRyuukyoku",
                        endGameRyuukyoku: EndGameRyuukyokuEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.ryuukyokuEvent as any).endGameRyuukyoku)
                    };
                    break;
                case /* MidGameRyuukyokuEventMsg mid_game_ryuukyoku */ 3:
                    message.ryuukyokuEvent = {
                        oneofKind: "midGameRyuukyoku",
                        midGameRyuukyoku: MidGameRyuukyokuEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.ryuukyokuEvent as any).midGameRyuukyoku)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RyuukyokuEventMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ScoreTransferMsg score_change = 1; */
        for (let i = 0; i < message.scoreChange.length; i++)
            ScoreTransferMsg.internalBinaryWrite(message.scoreChange[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* EndGameRyuukyokuEventMsg end_game_ryuukyoku = 2; */
        if (message.ryuukyokuEvent.oneofKind === "endGameRyuukyoku")
            EndGameRyuukyokuEventMsg.internalBinaryWrite(message.ryuukyokuEvent.endGameRyuukyoku, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MidGameRyuukyokuEventMsg mid_game_ryuukyoku = 3; */
        if (message.ryuukyokuEvent.oneofKind === "midGameRyuukyoku")
            MidGameRyuukyokuEventMsg.internalBinaryWrite(message.ryuukyokuEvent.midGameRyuukyoku, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RyuukyokuEventMsg
 */
export const RyuukyokuEventMsg = new RyuukyokuEventMsg$Type();
