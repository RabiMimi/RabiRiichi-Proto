// @generated by protobuf-ts 2.7.0 with parameter client_grpc1
// @generated from protobuf file "Events/Event.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SyncGameStateEventMsg } from "./InGame/SyncGameStateEvent";
import { StopGameEventMsg } from "./InGame/StopGameEvent";
import { SetRiichiEventMsg } from "./InGame/SetRiichiEvent";
import { SetMenzenEventMsg } from "./InGame/SetMenzenEvent";
import { SetIppatsuEventMsg } from "./InGame/SetIppatsuEvent";
import { SetFuritenEventMsg } from "./InGame/SetFuritenEvent";
import { RyuukyokuEventMsg } from "./InGame/RyuukyokuEvent";
import { RevealDoraEventMsg } from "./InGame/RevealDoraEvent";
import { NextPlayerEventMsg } from "./InGame/NextPlayerEvent";
import { NextGameEventMsg } from "./InGame/NextGameEvent";
import { LateClaimTileEventMsg } from "./InGame/LateClaimTileEvent";
import { KanEventMsg } from "./InGame/KanEvent";
import { IncreaseJunEventMsg } from "./InGame/IncreaseJunEvent";
import { DrawTileEventMsg } from "./InGame/DrawTileEvent";
import { DiscardTileEventMsg } from "./InGame/DiscardTileEvent";
import { DealHandEventMsg } from "./InGame/DealHandEvent";
import { DealerFirstTurnEventMsg } from "./InGame/DealerFirstTurnEvent";
import { ConcludeGameEventMsg } from "./InGame/ConcludeGameEvent";
import { ClaimTileEventMsg } from "./InGame/ClaimTileEvent";
import { CalcScoreEventMsg } from "./InGame/CalcScoreEvent";
import { BeginGameEventMsg } from "./InGame/BeginGameEvent";
import { ApplyScoreEventMsg } from "./InGame/ApplyScoreEvent";
import { AgariEventMsg } from "./InGame/AgariEvent";
import { AddTileEventMsg } from "./InGame/AddTileEvent";
import { AddKanEventMsg } from "./InGame/AddKanEvent";
/**
 * @generated from protobuf message EventMsg
 */
export interface EventMsg {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "addKanEvent";
        /**
         * @generated from protobuf field: AddKanEventMsg add_kan_event = 1;
         */
        addKanEvent: AddKanEventMsg;
    } | {
        oneofKind: "addTileEvent";
        /**
         * @generated from protobuf field: AddTileEventMsg add_tile_event = 2;
         */
        addTileEvent: AddTileEventMsg;
    } | {
        oneofKind: "agariEvent";
        /**
         * @generated from protobuf field: AgariEventMsg agari_event = 3;
         */
        agariEvent: AgariEventMsg;
    } | {
        oneofKind: "applyScoreEvent";
        /**
         * @generated from protobuf field: ApplyScoreEventMsg apply_score_event = 4;
         */
        applyScoreEvent: ApplyScoreEventMsg;
    } | {
        oneofKind: "beginGameEvent";
        /**
         * @generated from protobuf field: BeginGameEventMsg begin_game_event = 5;
         */
        beginGameEvent: BeginGameEventMsg;
    } | {
        oneofKind: "calcScoreEvent";
        /**
         * @generated from protobuf field: CalcScoreEventMsg calc_score_event = 6;
         */
        calcScoreEvent: CalcScoreEventMsg;
    } | {
        oneofKind: "claimTileEvent";
        /**
         * @generated from protobuf field: ClaimTileEventMsg claim_tile_event = 7;
         */
        claimTileEvent: ClaimTileEventMsg;
    } | {
        oneofKind: "concludeGameEvent";
        /**
         * @generated from protobuf field: ConcludeGameEventMsg conclude_game_event = 8;
         */
        concludeGameEvent: ConcludeGameEventMsg;
    } | {
        oneofKind: "dealerFirstTurnEvent";
        /**
         * @generated from protobuf field: DealerFirstTurnEventMsg dealer_first_turn_event = 9;
         */
        dealerFirstTurnEvent: DealerFirstTurnEventMsg;
    } | {
        oneofKind: "dealHandEvent";
        /**
         * @generated from protobuf field: DealHandEventMsg deal_hand_event = 10;
         */
        dealHandEvent: DealHandEventMsg;
    } | {
        oneofKind: "discardTileEvent";
        /**
         * @generated from protobuf field: DiscardTileEventMsg discard_tile_event = 11;
         */
        discardTileEvent: DiscardTileEventMsg;
    } | {
        oneofKind: "drawTileEvent";
        /**
         * @generated from protobuf field: DrawTileEventMsg draw_tile_event = 12;
         */
        drawTileEvent: DrawTileEventMsg;
    } | {
        oneofKind: "increaseJunEvent";
        /**
         * @generated from protobuf field: IncreaseJunEventMsg increase_jun_event = 13;
         */
        increaseJunEvent: IncreaseJunEventMsg;
    } | {
        oneofKind: "kanEvent";
        /**
         * @generated from protobuf field: KanEventMsg kan_event = 14;
         */
        kanEvent: KanEventMsg;
    } | {
        oneofKind: "lateClaimTileEvent";
        /**
         * @generated from protobuf field: LateClaimTileEventMsg late_claim_tile_event = 15;
         */
        lateClaimTileEvent: LateClaimTileEventMsg;
    } | {
        oneofKind: "nextGameEvent";
        /**
         * @generated from protobuf field: NextGameEventMsg next_game_event = 16;
         */
        nextGameEvent: NextGameEventMsg;
    } | {
        oneofKind: "nextPlayerEvent";
        /**
         * @generated from protobuf field: NextPlayerEventMsg next_player_event = 17;
         */
        nextPlayerEvent: NextPlayerEventMsg;
    } | {
        oneofKind: "revealDoraEvent";
        /**
         * @generated from protobuf field: RevealDoraEventMsg reveal_dora_event = 18;
         */
        revealDoraEvent: RevealDoraEventMsg;
    } | {
        oneofKind: "ryuukyokuEvent";
        /**
         * @generated from protobuf field: RyuukyokuEventMsg ryuukyoku_event = 19;
         */
        ryuukyokuEvent: RyuukyokuEventMsg;
    } | {
        oneofKind: "setFuritenEvent";
        /**
         * @generated from protobuf field: SetFuritenEventMsg set_furiten_event = 20;
         */
        setFuritenEvent: SetFuritenEventMsg;
    } | {
        oneofKind: "setIppatsuEvent";
        /**
         * @generated from protobuf field: SetIppatsuEventMsg set_ippatsu_event = 21;
         */
        setIppatsuEvent: SetIppatsuEventMsg;
    } | {
        oneofKind: "setMenzenEvent";
        /**
         * @generated from protobuf field: SetMenzenEventMsg set_menzen_event = 22;
         */
        setMenzenEvent: SetMenzenEventMsg;
    } | {
        oneofKind: "setRiichiEvent";
        /**
         * @generated from protobuf field: SetRiichiEventMsg set_riichi_event = 23;
         */
        setRiichiEvent: SetRiichiEventMsg;
    } | {
        oneofKind: "stopGameEvent";
        /**
         * @generated from protobuf field: StopGameEventMsg stop_game_event = 24;
         */
        stopGameEvent: StopGameEventMsg;
    } | {
        oneofKind: "syncGameStateEvent";
        /**
         * @generated from protobuf field: SyncGameStateEventMsg sync_game_state_event = 25;
         */
        syncGameStateEvent: SyncGameStateEventMsg;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class EventMsg$Type extends MessageType<EventMsg> {
    constructor() {
        super("EventMsg", [
            { no: 1, name: "add_kan_event", kind: "message", oneof: "event", T: () => AddKanEventMsg },
            { no: 2, name: "add_tile_event", kind: "message", oneof: "event", T: () => AddTileEventMsg },
            { no: 3, name: "agari_event", kind: "message", oneof: "event", T: () => AgariEventMsg },
            { no: 4, name: "apply_score_event", kind: "message", oneof: "event", T: () => ApplyScoreEventMsg },
            { no: 5, name: "begin_game_event", kind: "message", oneof: "event", T: () => BeginGameEventMsg },
            { no: 6, name: "calc_score_event", kind: "message", oneof: "event", T: () => CalcScoreEventMsg },
            { no: 7, name: "claim_tile_event", kind: "message", oneof: "event", T: () => ClaimTileEventMsg },
            { no: 8, name: "conclude_game_event", kind: "message", oneof: "event", T: () => ConcludeGameEventMsg },
            { no: 9, name: "dealer_first_turn_event", kind: "message", oneof: "event", T: () => DealerFirstTurnEventMsg },
            { no: 10, name: "deal_hand_event", kind: "message", oneof: "event", T: () => DealHandEventMsg },
            { no: 11, name: "discard_tile_event", kind: "message", oneof: "event", T: () => DiscardTileEventMsg },
            { no: 12, name: "draw_tile_event", kind: "message", oneof: "event", T: () => DrawTileEventMsg },
            { no: 13, name: "increase_jun_event", kind: "message", oneof: "event", T: () => IncreaseJunEventMsg },
            { no: 14, name: "kan_event", kind: "message", oneof: "event", T: () => KanEventMsg },
            { no: 15, name: "late_claim_tile_event", kind: "message", oneof: "event", T: () => LateClaimTileEventMsg },
            { no: 16, name: "next_game_event", kind: "message", oneof: "event", T: () => NextGameEventMsg },
            { no: 17, name: "next_player_event", kind: "message", oneof: "event", T: () => NextPlayerEventMsg },
            { no: 18, name: "reveal_dora_event", kind: "message", oneof: "event", T: () => RevealDoraEventMsg },
            { no: 19, name: "ryuukyoku_event", kind: "message", oneof: "event", T: () => RyuukyokuEventMsg },
            { no: 20, name: "set_furiten_event", kind: "message", oneof: "event", T: () => SetFuritenEventMsg },
            { no: 21, name: "set_ippatsu_event", kind: "message", oneof: "event", T: () => SetIppatsuEventMsg },
            { no: 22, name: "set_menzen_event", kind: "message", oneof: "event", T: () => SetMenzenEventMsg },
            { no: 23, name: "set_riichi_event", kind: "message", oneof: "event", T: () => SetRiichiEventMsg },
            { no: 24, name: "stop_game_event", kind: "message", oneof: "event", T: () => StopGameEventMsg },
            { no: 25, name: "sync_game_state_event", kind: "message", oneof: "event", T: () => SyncGameStateEventMsg }
        ]);
    }
    create(value?: PartialMessage<EventMsg>): EventMsg {
        const message = { event: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventMsg): EventMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AddKanEventMsg add_kan_event */ 1:
                    message.event = {
                        oneofKind: "addKanEvent",
                        addKanEvent: AddKanEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).addKanEvent)
                    };
                    break;
                case /* AddTileEventMsg add_tile_event */ 2:
                    message.event = {
                        oneofKind: "addTileEvent",
                        addTileEvent: AddTileEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).addTileEvent)
                    };
                    break;
                case /* AgariEventMsg agari_event */ 3:
                    message.event = {
                        oneofKind: "agariEvent",
                        agariEvent: AgariEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).agariEvent)
                    };
                    break;
                case /* ApplyScoreEventMsg apply_score_event */ 4:
                    message.event = {
                        oneofKind: "applyScoreEvent",
                        applyScoreEvent: ApplyScoreEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).applyScoreEvent)
                    };
                    break;
                case /* BeginGameEventMsg begin_game_event */ 5:
                    message.event = {
                        oneofKind: "beginGameEvent",
                        beginGameEvent: BeginGameEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).beginGameEvent)
                    };
                    break;
                case /* CalcScoreEventMsg calc_score_event */ 6:
                    message.event = {
                        oneofKind: "calcScoreEvent",
                        calcScoreEvent: CalcScoreEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).calcScoreEvent)
                    };
                    break;
                case /* ClaimTileEventMsg claim_tile_event */ 7:
                    message.event = {
                        oneofKind: "claimTileEvent",
                        claimTileEvent: ClaimTileEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).claimTileEvent)
                    };
                    break;
                case /* ConcludeGameEventMsg conclude_game_event */ 8:
                    message.event = {
                        oneofKind: "concludeGameEvent",
                        concludeGameEvent: ConcludeGameEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).concludeGameEvent)
                    };
                    break;
                case /* DealerFirstTurnEventMsg dealer_first_turn_event */ 9:
                    message.event = {
                        oneofKind: "dealerFirstTurnEvent",
                        dealerFirstTurnEvent: DealerFirstTurnEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).dealerFirstTurnEvent)
                    };
                    break;
                case /* DealHandEventMsg deal_hand_event */ 10:
                    message.event = {
                        oneofKind: "dealHandEvent",
                        dealHandEvent: DealHandEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).dealHandEvent)
                    };
                    break;
                case /* DiscardTileEventMsg discard_tile_event */ 11:
                    message.event = {
                        oneofKind: "discardTileEvent",
                        discardTileEvent: DiscardTileEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).discardTileEvent)
                    };
                    break;
                case /* DrawTileEventMsg draw_tile_event */ 12:
                    message.event = {
                        oneofKind: "drawTileEvent",
                        drawTileEvent: DrawTileEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).drawTileEvent)
                    };
                    break;
                case /* IncreaseJunEventMsg increase_jun_event */ 13:
                    message.event = {
                        oneofKind: "increaseJunEvent",
                        increaseJunEvent: IncreaseJunEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).increaseJunEvent)
                    };
                    break;
                case /* KanEventMsg kan_event */ 14:
                    message.event = {
                        oneofKind: "kanEvent",
                        kanEvent: KanEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).kanEvent)
                    };
                    break;
                case /* LateClaimTileEventMsg late_claim_tile_event */ 15:
                    message.event = {
                        oneofKind: "lateClaimTileEvent",
                        lateClaimTileEvent: LateClaimTileEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).lateClaimTileEvent)
                    };
                    break;
                case /* NextGameEventMsg next_game_event */ 16:
                    message.event = {
                        oneofKind: "nextGameEvent",
                        nextGameEvent: NextGameEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).nextGameEvent)
                    };
                    break;
                case /* NextPlayerEventMsg next_player_event */ 17:
                    message.event = {
                        oneofKind: "nextPlayerEvent",
                        nextPlayerEvent: NextPlayerEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).nextPlayerEvent)
                    };
                    break;
                case /* RevealDoraEventMsg reveal_dora_event */ 18:
                    message.event = {
                        oneofKind: "revealDoraEvent",
                        revealDoraEvent: RevealDoraEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).revealDoraEvent)
                    };
                    break;
                case /* RyuukyokuEventMsg ryuukyoku_event */ 19:
                    message.event = {
                        oneofKind: "ryuukyokuEvent",
                        ryuukyokuEvent: RyuukyokuEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).ryuukyokuEvent)
                    };
                    break;
                case /* SetFuritenEventMsg set_furiten_event */ 20:
                    message.event = {
                        oneofKind: "setFuritenEvent",
                        setFuritenEvent: SetFuritenEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).setFuritenEvent)
                    };
                    break;
                case /* SetIppatsuEventMsg set_ippatsu_event */ 21:
                    message.event = {
                        oneofKind: "setIppatsuEvent",
                        setIppatsuEvent: SetIppatsuEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).setIppatsuEvent)
                    };
                    break;
                case /* SetMenzenEventMsg set_menzen_event */ 22:
                    message.event = {
                        oneofKind: "setMenzenEvent",
                        setMenzenEvent: SetMenzenEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).setMenzenEvent)
                    };
                    break;
                case /* SetRiichiEventMsg set_riichi_event */ 23:
                    message.event = {
                        oneofKind: "setRiichiEvent",
                        setRiichiEvent: SetRiichiEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).setRiichiEvent)
                    };
                    break;
                case /* StopGameEventMsg stop_game_event */ 24:
                    message.event = {
                        oneofKind: "stopGameEvent",
                        stopGameEvent: StopGameEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).stopGameEvent)
                    };
                    break;
                case /* SyncGameStateEventMsg sync_game_state_event */ 25:
                    message.event = {
                        oneofKind: "syncGameStateEvent",
                        syncGameStateEvent: SyncGameStateEventMsg.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).syncGameStateEvent)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AddKanEventMsg add_kan_event = 1; */
        if (message.event.oneofKind === "addKanEvent")
            AddKanEventMsg.internalBinaryWrite(message.event.addKanEvent, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* AddTileEventMsg add_tile_event = 2; */
        if (message.event.oneofKind === "addTileEvent")
            AddTileEventMsg.internalBinaryWrite(message.event.addTileEvent, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* AgariEventMsg agari_event = 3; */
        if (message.event.oneofKind === "agariEvent")
            AgariEventMsg.internalBinaryWrite(message.event.agariEvent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* ApplyScoreEventMsg apply_score_event = 4; */
        if (message.event.oneofKind === "applyScoreEvent")
            ApplyScoreEventMsg.internalBinaryWrite(message.event.applyScoreEvent, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* BeginGameEventMsg begin_game_event = 5; */
        if (message.event.oneofKind === "beginGameEvent")
            BeginGameEventMsg.internalBinaryWrite(message.event.beginGameEvent, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* CalcScoreEventMsg calc_score_event = 6; */
        if (message.event.oneofKind === "calcScoreEvent")
            CalcScoreEventMsg.internalBinaryWrite(message.event.calcScoreEvent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* ClaimTileEventMsg claim_tile_event = 7; */
        if (message.event.oneofKind === "claimTileEvent")
            ClaimTileEventMsg.internalBinaryWrite(message.event.claimTileEvent, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* ConcludeGameEventMsg conclude_game_event = 8; */
        if (message.event.oneofKind === "concludeGameEvent")
            ConcludeGameEventMsg.internalBinaryWrite(message.event.concludeGameEvent, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* DealerFirstTurnEventMsg dealer_first_turn_event = 9; */
        if (message.event.oneofKind === "dealerFirstTurnEvent")
            DealerFirstTurnEventMsg.internalBinaryWrite(message.event.dealerFirstTurnEvent, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* DealHandEventMsg deal_hand_event = 10; */
        if (message.event.oneofKind === "dealHandEvent")
            DealHandEventMsg.internalBinaryWrite(message.event.dealHandEvent, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* DiscardTileEventMsg discard_tile_event = 11; */
        if (message.event.oneofKind === "discardTileEvent")
            DiscardTileEventMsg.internalBinaryWrite(message.event.discardTileEvent, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* DrawTileEventMsg draw_tile_event = 12; */
        if (message.event.oneofKind === "drawTileEvent")
            DrawTileEventMsg.internalBinaryWrite(message.event.drawTileEvent, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* IncreaseJunEventMsg increase_jun_event = 13; */
        if (message.event.oneofKind === "increaseJunEvent")
            IncreaseJunEventMsg.internalBinaryWrite(message.event.increaseJunEvent, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* KanEventMsg kan_event = 14; */
        if (message.event.oneofKind === "kanEvent")
            KanEventMsg.internalBinaryWrite(message.event.kanEvent, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* LateClaimTileEventMsg late_claim_tile_event = 15; */
        if (message.event.oneofKind === "lateClaimTileEvent")
            LateClaimTileEventMsg.internalBinaryWrite(message.event.lateClaimTileEvent, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* NextGameEventMsg next_game_event = 16; */
        if (message.event.oneofKind === "nextGameEvent")
            NextGameEventMsg.internalBinaryWrite(message.event.nextGameEvent, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* NextPlayerEventMsg next_player_event = 17; */
        if (message.event.oneofKind === "nextPlayerEvent")
            NextPlayerEventMsg.internalBinaryWrite(message.event.nextPlayerEvent, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* RevealDoraEventMsg reveal_dora_event = 18; */
        if (message.event.oneofKind === "revealDoraEvent")
            RevealDoraEventMsg.internalBinaryWrite(message.event.revealDoraEvent, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* RyuukyokuEventMsg ryuukyoku_event = 19; */
        if (message.event.oneofKind === "ryuukyokuEvent")
            RyuukyokuEventMsg.internalBinaryWrite(message.event.ryuukyokuEvent, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* SetFuritenEventMsg set_furiten_event = 20; */
        if (message.event.oneofKind === "setFuritenEvent")
            SetFuritenEventMsg.internalBinaryWrite(message.event.setFuritenEvent, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* SetIppatsuEventMsg set_ippatsu_event = 21; */
        if (message.event.oneofKind === "setIppatsuEvent")
            SetIppatsuEventMsg.internalBinaryWrite(message.event.setIppatsuEvent, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* SetMenzenEventMsg set_menzen_event = 22; */
        if (message.event.oneofKind === "setMenzenEvent")
            SetMenzenEventMsg.internalBinaryWrite(message.event.setMenzenEvent, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* SetRiichiEventMsg set_riichi_event = 23; */
        if (message.event.oneofKind === "setRiichiEvent")
            SetRiichiEventMsg.internalBinaryWrite(message.event.setRiichiEvent, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* StopGameEventMsg stop_game_event = 24; */
        if (message.event.oneofKind === "stopGameEvent")
            StopGameEventMsg.internalBinaryWrite(message.event.stopGameEvent, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* SyncGameStateEventMsg sync_game_state_event = 25; */
        if (message.event.oneofKind === "syncGameStateEvent")
            SyncGameStateEventMsg.internalBinaryWrite(message.event.syncGameStateEvent, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EventMsg
 */
export const EventMsg = new EventMsg$Type();
