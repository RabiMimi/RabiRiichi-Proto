// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "Patterns/ScoreStorage.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ScoreCalcResultMsg } from "./ScoreCalcResult";
import { ScoringMsg } from "./StdPattern";
/**
 * @generated from protobuf message ScoreStorageMsg
 */
export interface ScoreStorageMsg {
    /**
     * @generated from protobuf field: repeated ScoringMsg items = 1;
     */
    items: ScoringMsg[];
    /**
     * @generated from protobuf field: ScoreCalcResultMsg result = 2;
     */
    result?: ScoreCalcResultMsg;
}
// @generated message type with reflection information, may provide speed optimized methods
class ScoreStorageMsg$Type extends MessageType<ScoreStorageMsg> {
    constructor() {
        super("ScoreStorageMsg", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ScoringMsg },
            { no: 2, name: "result", kind: "message", T: () => ScoreCalcResultMsg }
        ]);
    }
    create(value?: PartialMessage<ScoreStorageMsg>): ScoreStorageMsg {
        const message = { items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScoreStorageMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScoreStorageMsg): ScoreStorageMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ScoringMsg items */ 1:
                    message.items.push(ScoringMsg.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* ScoreCalcResultMsg result */ 2:
                    message.result = ScoreCalcResultMsg.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScoreStorageMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ScoringMsg items = 1; */
        for (let i = 0; i < message.items.length; i++)
            ScoringMsg.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ScoreCalcResultMsg result = 2; */
        if (message.result)
            ScoreCalcResultMsg.internalBinaryWrite(message.result, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ScoreStorageMsg
 */
export const ScoreStorageMsg = new ScoreStorageMsg$Type();
