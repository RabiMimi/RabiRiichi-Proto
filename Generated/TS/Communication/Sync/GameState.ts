// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "Communication/Sync/GameState.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GameTileMsg } from "../../Core/GameTile";
import { MenLikeMsg } from "../../Core/MenLike";
/**
 * @generated from protobuf message PlayerHandStateMsg
 */
export interface PlayerHandStateMsg {
    /**
     * @generated from protobuf field: repeated MenLikeMsg called = 1;
     */
    called: MenLikeMsg[];
    /**
     * @generated from protobuf field: repeated GameTileMsg discarded = 2;
     */
    discarded: GameTileMsg[];
    /**
     * @generated from protobuf field: int32 jun = 3;
     */
    jun: number;
    /**
     * @generated from protobuf field: int32 riichiStick = 4;
     */
    riichiStick: number;
    /**
     * @generated from protobuf field: GameTileMsg agariTile = 5;
     */
    agariTile?: GameTileMsg;
    /**
     * @generated from protobuf field: bool riichi = 6;
     */
    riichi: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayerHandStateMsg$Type extends MessageType<PlayerHandStateMsg> {
    constructor() {
        super("PlayerHandStateMsg", [
            { no: 1, name: "called", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MenLikeMsg },
            { no: 2, name: "discarded", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GameTileMsg },
            { no: 3, name: "jun", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "riichiStick", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "agariTile", kind: "message", T: () => GameTileMsg },
            { no: 6, name: "riichi", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerHandStateMsg>): PlayerHandStateMsg {
        const message = { called: [], discarded: [], jun: 0, riichiStick: 0, riichi: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerHandStateMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerHandStateMsg): PlayerHandStateMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated MenLikeMsg called */ 1:
                    message.called.push(MenLikeMsg.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated GameTileMsg discarded */ 2:
                    message.discarded.push(GameTileMsg.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 jun */ 3:
                    message.jun = reader.int32();
                    break;
                case /* int32 riichiStick */ 4:
                    message.riichiStick = reader.int32();
                    break;
                case /* GameTileMsg agariTile */ 5:
                    message.agariTile = GameTileMsg.internalBinaryRead(reader, reader.uint32(), options, message.agariTile);
                    break;
                case /* bool riichi */ 6:
                    message.riichi = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerHandStateMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated MenLikeMsg called = 1; */
        for (let i = 0; i < message.called.length; i++)
            MenLikeMsg.internalBinaryWrite(message.called[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated GameTileMsg discarded = 2; */
        for (let i = 0; i < message.discarded.length; i++)
            GameTileMsg.internalBinaryWrite(message.discarded[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 jun = 3; */
        if (message.jun !== 0)
            writer.tag(3, WireType.Varint).int32(message.jun);
        /* int32 riichiStick = 4; */
        if (message.riichiStick !== 0)
            writer.tag(4, WireType.Varint).int32(message.riichiStick);
        /* GameTileMsg agariTile = 5; */
        if (message.agariTile)
            GameTileMsg.internalBinaryWrite(message.agariTile, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool riichi = 6; */
        if (message.riichi !== false)
            writer.tag(6, WireType.Varint).bool(message.riichi);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerHandStateMsg
 */
export const PlayerHandStateMsg = new PlayerHandStateMsg$Type();
