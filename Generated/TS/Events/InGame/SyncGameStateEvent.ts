// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "Events/InGame/SyncGameStateEvent.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GameStateMsg } from "../../Communication/Sync/GameState";
/**
 * @generated from protobuf message SyncGameStateEventMsg
 */
export interface SyncGameStateEventMsg {
    /**
     * @generated from protobuf field: int32 playerId = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: GameStateMsg gameState = 2;
     */
    gameState?: GameStateMsg;
    /**
     * @generated from protobuf field: map<string, string> extra = 3;
     */
    extra: {
        [key: string]: string;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class SyncGameStateEventMsg$Type extends MessageType<SyncGameStateEventMsg> {
    constructor() {
        super("SyncGameStateEventMsg", [
            { no: 1, name: "playerId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "gameState", kind: "message", T: () => GameStateMsg },
            { no: 3, name: "extra", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<SyncGameStateEventMsg>): SyncGameStateEventMsg {
        const message = { playerId: 0, extra: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SyncGameStateEventMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SyncGameStateEventMsg): SyncGameStateEventMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 playerId */ 1:
                    message.playerId = reader.int32();
                    break;
                case /* GameStateMsg gameState */ 2:
                    message.gameState = GameStateMsg.internalBinaryRead(reader, reader.uint32(), options, message.gameState);
                    break;
                case /* map<string, string> extra */ 3:
                    this.binaryReadMap3(message.extra, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: SyncGameStateEventMsg["extra"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SyncGameStateEventMsg["extra"] | undefined, val: SyncGameStateEventMsg["extra"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field SyncGameStateEventMsg.extra");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: SyncGameStateEventMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 playerId = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerId);
        /* GameStateMsg gameState = 2; */
        if (message.gameState)
            GameStateMsg.internalBinaryWrite(message.gameState, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> extra = 3; */
        for (let k of Object.keys(message.extra))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.extra[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SyncGameStateEventMsg
 */
export const SyncGameStateEventMsg = new SyncGameStateEventMsg$Type();
