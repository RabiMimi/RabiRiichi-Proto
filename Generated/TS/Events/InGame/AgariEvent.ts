// @generated by protobuf-ts 2.7.0
// @generated from protobuf file "Events/InGame/AgariEvent.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GameTileMsg } from "../../Core/GameTile";
import { ScoreStorageMsg } from "../../Patterns/ScoreStorage";
/**
 * @generated from protobuf message AgariInfoMsg
 */
export interface AgariInfoMsg {
    /**
     * @generated from protobuf field: int32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: ScoreStorageMsg scores = 2;
     */
    scores?: ScoreStorageMsg;
}
/**
 * @generated from protobuf message AgariInfoListMsg
 */
export interface AgariInfoListMsg {
    /**
     * @generated from protobuf field: repeated AgariInfoMsg agari_infos = 1;
     */
    agariInfos: AgariInfoMsg[];
    /**
     * @generated from protobuf field: int32 from_player = 2;
     */
    fromPlayer: number;
    /**
     * @generated from protobuf field: GameTileMsg incoming = 3;
     */
    incoming?: GameTileMsg;
}
/**
 * @generated from protobuf message AgariEventMsg
 */
export interface AgariEventMsg {
    /**
     * @generated from protobuf field: bool is_tsumo = 1;
     */
    isTsumo: boolean;
    /**
     * @generated from protobuf field: AgariInfoListMsg agari_infos = 2;
     */
    agariInfos?: AgariInfoListMsg;
}
// @generated message type with reflection information, may provide speed optimized methods
class AgariInfoMsg$Type extends MessageType<AgariInfoMsg> {
    constructor() {
        super("AgariInfoMsg", [
            { no: 1, name: "player_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "scores", kind: "message", T: () => ScoreStorageMsg }
        ]);
    }
    create(value?: PartialMessage<AgariInfoMsg>): AgariInfoMsg {
        const message = { playerId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AgariInfoMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AgariInfoMsg): AgariInfoMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 player_id */ 1:
                    message.playerId = reader.int32();
                    break;
                case /* ScoreStorageMsg scores */ 2:
                    message.scores = ScoreStorageMsg.internalBinaryRead(reader, reader.uint32(), options, message.scores);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AgariInfoMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerId);
        /* ScoreStorageMsg scores = 2; */
        if (message.scores)
            ScoreStorageMsg.internalBinaryWrite(message.scores, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AgariInfoMsg
 */
export const AgariInfoMsg = new AgariInfoMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AgariInfoListMsg$Type extends MessageType<AgariInfoListMsg> {
    constructor() {
        super("AgariInfoListMsg", [
            { no: 1, name: "agari_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AgariInfoMsg },
            { no: 2, name: "from_player", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "incoming", kind: "message", T: () => GameTileMsg }
        ]);
    }
    create(value?: PartialMessage<AgariInfoListMsg>): AgariInfoListMsg {
        const message = { agariInfos: [], fromPlayer: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AgariInfoListMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AgariInfoListMsg): AgariInfoListMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated AgariInfoMsg agari_infos */ 1:
                    message.agariInfos.push(AgariInfoMsg.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 from_player */ 2:
                    message.fromPlayer = reader.int32();
                    break;
                case /* GameTileMsg incoming */ 3:
                    message.incoming = GameTileMsg.internalBinaryRead(reader, reader.uint32(), options, message.incoming);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AgariInfoListMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated AgariInfoMsg agari_infos = 1; */
        for (let i = 0; i < message.agariInfos.length; i++)
            AgariInfoMsg.internalBinaryWrite(message.agariInfos[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 from_player = 2; */
        if (message.fromPlayer !== 0)
            writer.tag(2, WireType.Varint).int32(message.fromPlayer);
        /* GameTileMsg incoming = 3; */
        if (message.incoming)
            GameTileMsg.internalBinaryWrite(message.incoming, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AgariInfoListMsg
 */
export const AgariInfoListMsg = new AgariInfoListMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AgariEventMsg$Type extends MessageType<AgariEventMsg> {
    constructor() {
        super("AgariEventMsg", [
            { no: 1, name: "is_tsumo", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "agari_infos", kind: "message", T: () => AgariInfoListMsg }
        ]);
    }
    create(value?: PartialMessage<AgariEventMsg>): AgariEventMsg {
        const message = { isTsumo: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AgariEventMsg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AgariEventMsg): AgariEventMsg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_tsumo */ 1:
                    message.isTsumo = reader.bool();
                    break;
                case /* AgariInfoListMsg agari_infos */ 2:
                    message.agariInfos = AgariInfoListMsg.internalBinaryRead(reader, reader.uint32(), options, message.agariInfos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AgariEventMsg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_tsumo = 1; */
        if (message.isTsumo !== false)
            writer.tag(1, WireType.Varint).bool(message.isTsumo);
        /* AgariInfoListMsg agari_infos = 2; */
        if (message.agariInfos)
            AgariInfoListMsg.internalBinaryWrite(message.agariInfos, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AgariEventMsg
 */
export const AgariEventMsg = new AgariEventMsg$Type();
