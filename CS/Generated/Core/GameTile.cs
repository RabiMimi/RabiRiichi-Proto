// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Core/GameTile.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RabiRiichi.Generated.Core {

  /// <summary>Holder for reflection information generated from Core/GameTile.proto</summary>
  public static partial class GameTileReflection {

    #region Descriptor
    /// <summary>File descriptor for Core/GameTile.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameTileReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNDb3JlL0dhbWVUaWxlLnByb3RvIj4KDkRpc2NhcmRJbmZvTXNnEgwKBGZy",
            "b20YASABKAUSHgoGcmVhc29uGAIgASgOMg4uRGlzY2FyZFJlYXNvbiJyCgtH",
            "YW1lVGlsZU1zZxIMCgR0aWxlGAEgASgFEhEKCXBsYXllcl9pZBgCIAEoBRIl",
            "CgxkaXNjYXJkX2luZm8YAyABKAsyDy5EaXNjYXJkSW5mb01zZxIbCgZzb3Vy",
            "Y2UYBCABKA4yCy5UaWxlU291cmNlKsoBCg1EaXNjYXJkUmVhc29uEhcKE0RJ",
            "U0NBUkRfUkVBU09OX05PTkUQABIXChNESVNDQVJEX1JFQVNPTl9EUkFXEAES",
            "HgoaRElTQ0FSRF9SRUFTT05fRFJBV1JJTlNIQU4QAhIXChNESVNDQVJEX1JF",
            "QVNPTl9DSElJEAMSFgoSRElTQ0FSRF9SRUFTT05fUE9OEAQSGgoWRElTQ0FS",
            "RF9SRUFTT05fQ0hBTktBThAFEhoKFkRJU0NBUkRfUkVBU09OX1BSRVRFTkQQ",
            "BirzAQoKVGlsZVNvdXJjZRIUChBUSUxFX1NPVVJDRV9OT05FEAASFgoSVElM",
            "RV9TT1VSQ0VfV0FOUEFJEAESFAoQVElMRV9TT1VSQ0VfV0FMTBACEhQKEFRJ",
            "TEVfU09VUkNFX0hBTkQQAxIXChNUSUxFX1NPVVJDRV9ESVNDQVJEEAQSFAoQ",
            "VElMRV9TT1VSQ0VfQ0hJSRAFEhMKD1RJTEVfU09VUkNFX1BPThAGEhUKEVRJ",
            "TEVfU09VUkNFX0tBS0FOEAcSFQoRVElMRV9TT1VSQ0VfQU5LQU4QCBIZChVU",
            "SUxFX1NPVVJDRV9EQUlNSU5LQU4QCUIcqgIZUmFiaVJpaWNoaS5HZW5lcmF0",
            "ZWQuQ29yZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::RabiRiichi.Generated.Core.DiscardReason), typeof(global::RabiRiichi.Generated.Core.TileSource), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RabiRiichi.Generated.Core.DiscardInfoMsg), global::RabiRiichi.Generated.Core.DiscardInfoMsg.Parser, new[]{ "From", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RabiRiichi.Generated.Core.GameTileMsg), global::RabiRiichi.Generated.Core.GameTileMsg.Parser, new[]{ "Tile", "PlayerId", "DiscardInfo", "Source" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum DiscardReason {
    [pbr::OriginalName("DISCARD_REASON_NONE")] None = 0,
    [pbr::OriginalName("DISCARD_REASON_DRAW")] Draw = 1,
    [pbr::OriginalName("DISCARD_REASON_DRAWRINSHAN")] Drawrinshan = 2,
    [pbr::OriginalName("DISCARD_REASON_CHII")] Chii = 3,
    [pbr::OriginalName("DISCARD_REASON_PON")] Pon = 4,
    [pbr::OriginalName("DISCARD_REASON_CHANKAN")] Chankan = 5,
    [pbr::OriginalName("DISCARD_REASON_PRETEND")] Pretend = 6,
  }

  public enum TileSource {
    [pbr::OriginalName("TILE_SOURCE_NONE")] None = 0,
    [pbr::OriginalName("TILE_SOURCE_WANPAI")] Wanpai = 1,
    [pbr::OriginalName("TILE_SOURCE_WALL")] Wall = 2,
    [pbr::OriginalName("TILE_SOURCE_HAND")] Hand = 3,
    [pbr::OriginalName("TILE_SOURCE_DISCARD")] Discard = 4,
    [pbr::OriginalName("TILE_SOURCE_CHII")] Chii = 5,
    [pbr::OriginalName("TILE_SOURCE_PON")] Pon = 6,
    [pbr::OriginalName("TILE_SOURCE_KAKAN")] Kakan = 7,
    [pbr::OriginalName("TILE_SOURCE_ANKAN")] Ankan = 8,
    [pbr::OriginalName("TILE_SOURCE_DAIMINKAN")] Daiminkan = 9,
  }

  #endregion

  #region Messages
  public sealed partial class DiscardInfoMsg : pb::IMessage<DiscardInfoMsg> {
    private static readonly pb::MessageParser<DiscardInfoMsg> _parser = new pb::MessageParser<DiscardInfoMsg>(() => new DiscardInfoMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiscardInfoMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RabiRiichi.Generated.Core.GameTileReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardInfoMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardInfoMsg(DiscardInfoMsg other) : this() {
      from_ = other.from_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiscardInfoMsg Clone() {
      return new DiscardInfoMsg(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private int from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private global::RabiRiichi.Generated.Core.DiscardReason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Core.DiscardReason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiscardInfoMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiscardInfoMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From != 0) hash ^= From.GetHashCode();
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(From);
      }
      if (Reason != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(From);
      }
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiscardInfoMsg other) {
      if (other == null) {
        return;
      }
      if (other.From != 0) {
        From = other.From;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            From = input.ReadInt32();
            break;
          }
          case 16: {
            reason_ = (global::RabiRiichi.Generated.Core.DiscardReason) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameTileMsg : pb::IMessage<GameTileMsg> {
    private static readonly pb::MessageParser<GameTileMsg> _parser = new pb::MessageParser<GameTileMsg>(() => new GameTileMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameTileMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RabiRiichi.Generated.Core.GameTileReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTileMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTileMsg(GameTileMsg other) : this() {
      tile_ = other.tile_;
      playerId_ = other.playerId_;
      discardInfo_ = other.discardInfo_ != null ? other.discardInfo_.Clone() : null;
      source_ = other.source_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTileMsg Clone() {
      return new GameTileMsg(this);
    }

    /// <summary>Field number for the "tile" field.</summary>
    public const int TileFieldNumber = 1;
    private int tile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tile {
      get { return tile_; }
      set {
        tile_ = value;
      }
    }

    /// <summary>Field number for the "player_id" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private int playerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    /// <summary>Field number for the "discard_info" field.</summary>
    public const int DiscardInfoFieldNumber = 3;
    private global::RabiRiichi.Generated.Core.DiscardInfoMsg discardInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Core.DiscardInfoMsg DiscardInfo {
      get { return discardInfo_; }
      set {
        discardInfo_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 4;
    private global::RabiRiichi.Generated.Core.TileSource source_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RabiRiichi.Generated.Core.TileSource Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameTileMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameTileMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tile != other.Tile) return false;
      if (PlayerId != other.PlayerId) return false;
      if (!object.Equals(DiscardInfo, other.DiscardInfo)) return false;
      if (Source != other.Source) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tile != 0) hash ^= Tile.GetHashCode();
      if (PlayerId != 0) hash ^= PlayerId.GetHashCode();
      if (discardInfo_ != null) hash ^= DiscardInfo.GetHashCode();
      if (Source != 0) hash ^= Source.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tile != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tile);
      }
      if (PlayerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerId);
      }
      if (discardInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DiscardInfo);
      }
      if (Source != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Source);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tile);
      }
      if (PlayerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerId);
      }
      if (discardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiscardInfo);
      }
      if (Source != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Source);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameTileMsg other) {
      if (other == null) {
        return;
      }
      if (other.Tile != 0) {
        Tile = other.Tile;
      }
      if (other.PlayerId != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.discardInfo_ != null) {
        if (discardInfo_ == null) {
          discardInfo_ = new global::RabiRiichi.Generated.Core.DiscardInfoMsg();
        }
        DiscardInfo.MergeFrom(other.DiscardInfo);
      }
      if (other.Source != 0) {
        Source = other.Source;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tile = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerId = input.ReadInt32();
            break;
          }
          case 26: {
            if (discardInfo_ == null) {
              discardInfo_ = new global::RabiRiichi.Generated.Core.DiscardInfoMsg();
            }
            input.ReadMessage(discardInfo_);
            break;
          }
          case 32: {
            source_ = (global::RabiRiichi.Generated.Core.TileSource) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
